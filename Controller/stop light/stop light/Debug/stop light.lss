
stop light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000895  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <togglelight>:
#define yellow PD2
#define green PD3

void togglelight(int light)
{
	PORTD ^= (1<<light);
  80:	9b b1       	in	r25, 0x0b	; 11
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <togglelight+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <togglelight+0x8>
  90:	29 27       	eor	r18, r25
  92:	2b b9       	out	0x0b, r18	; 11
  94:	08 95       	ret

00000096 <main>:
}
int main(void)
{
	DDRD = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
    /* Replace with your application code */
    while (1) 
    {
		togglelight(red);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e7       	ldi	r18, 0x7F	; 127
  a4:	84 e8       	ldi	r24, 0x84	; 132
  a6:	9e e1       	ldi	r25, 0x1E	; 30
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x12>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x1c>
  b2:	00 00       	nop
		_delay_ms(10000);
		togglelight(yellow);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
  bc:	2f eb       	ldi	r18, 0xBF	; 191
  be:	8c e5       	ldi	r24, 0x5C	; 92
  c0:	95 e1       	ldi	r25, 0x15	; 21
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x36>
  cc:	00 00       	nop
		_delay_ms(7000);
		togglelight(red);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
		togglelight(yellow);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
		togglelight(green);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
  e6:	2f e7       	ldi	r18, 0x7F	; 127
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	9e e1       	ldi	r25, 0x1E	; 30
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x56>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x60>
  f6:	00 00       	nop
		_delay_ms(10000);
		togglelight(green);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
		togglelight(yellow);
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
 108:	2f eb       	ldi	r18, 0xBF	; 191
 10a:	8c e5       	ldi	r24, 0x5C	; 92
 10c:	95 e1       	ldi	r25, 0x15	; 21
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x78>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x82>
 118:	00 00       	nop
		_delay_ms(7000);
		togglelight(yellow);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 40 00 	call	0x80	; 0x80 <togglelight>
 122:	bb cf       	rjmp	.-138    	; 0x9a <main+0x4>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
